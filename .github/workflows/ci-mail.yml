name: 🔍 CI - Mail Chart Validation

on:
  push:
    branches: [ main ]
    paths:
      - 'mail/**'
      - '.github/workflows/ci-mail.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mail/**'
  workflow_dispatch:

env:
  CHART_PATH: mail

jobs:
  validate-mail-chart:
    name: 📋 Validation du Chart Mail
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.15.4'

      - name: 🔍 Helm Lint
        run: |
          echo "🔍 === VALIDATION HELM LINT ==="
          helm lint ${{ env.CHART_PATH }} --strict
          echo "✅ Helm lint passed!"

      - name: 🎨 Test Template Rendering
        run: |
          echo "🎨 === TEST DE RENDU DES TEMPLATES ==="
          helm template test-mail ${{ env.CHART_PATH }} --dry-run --debug > /tmp/rendered-mail.yaml
          
          echo "📄 Objets Kubernetes générés:"
          grep -c "^kind:" /tmp/rendered-mail.yaml || echo "0"
          
          echo ""
          echo "📋 Types d'objets:"
          grep "^kind:" /tmp/rendered-mail.yaml | sort | uniq -c
          echo "✅ Template rendering OK!"

      - name: 🔒 Security Audit - Hard-coded Passwords
        run: |
          echo "🔒 === AUDIT: MOTS DE PASSE EN DUR ==="
          echo "ℹ️ Vérification des mots de passe en dur (hors Secrets Kubernetes)..."
          
          password_found=false
          
          for file in $(find ${{ env.CHART_PATH }}/templates -name "*.yaml" -not -name "*secret*"); do
            if grep -E "(password|pwd).*:.*['\"][^'\"]*[a-zA-Z0-9]{3,}[^'\"]*['\"]" "$file" | \
               grep -v "passwordSecretRef" | \
               grep -v "{{ .*password" | \
               grep -v "#.*password" | \
               grep -v "name: RELAY_PASSWORD" | \
               grep -v "value:"; then
              echo "❌ Mot de passe trouvé dans: $file"
              password_found=true
            fi
          done
          
          if [ "$password_found" = true ]; then
            echo "❌ ÉCHEC: Mots de passe en dur détectés!"
            exit 1
          else
            echo "✅ Aucun mot de passe en dur détecté hors Secrets"
            echo "ℹ️ Secrets Kubernetes: Gérés correctement via Secret resources"
          fi

      - name: 🔒 Security Audit - Privileged Containers
        run: |
          echo "🔒 === AUDIT: PRIVILÈGES ÉLEVÉS ==="
          if grep -rn "privileged.*true" ${{ env.CHART_PATH }}/templates/*.yaml 2>/dev/null | grep -v "capabilities:"; then
            echo "⚠️ WARNING: Conteneur privilégié détecté!"
          else
            echo "✅ Pas de conteneur en mode privilégié total"
          fi
          
          echo ""
          echo "ℹ️ Vérification des capabilities..."
          if grep -A5 "capabilities:" ${{ env.CHART_PATH }}/templates/*.yaml 2>/dev/null; then
            echo "ℹ️ Capabilities détectées (NET_ADMIN, SYS_PTRACE pour mailserver)"
            echo "✅ Nécessaires pour le fonctionnement du mailserver"
          fi

      - name: 🔒 Security Audit - Image Tags
        run: |
          echo "🔒 === AUDIT: TAGS D'IMAGES ==="
          if grep -rn -E 'image:.*latest["\']?\s*$' ${{ env.CHART_PATH }}/templates/*.yaml | grep -v "{{"; then
            echo "⚠️ WARNING: Images avec tag 'latest' détectées!"
            echo "ℹ️ Recommandation: Utilisez des tags spécifiques"
            exit 1
          else
            echo "✅ Toutes les images utilisent des tags spécifiques"
          fi

      - name: 📏 YAML Lint
        run: |
          echo "📏 === LINT YAML ==="
          sudo apt-get update && sudo apt-get install -y yamllint
          
          cat <<EOF > .yamllint
          extends: default
          rules:
            line-length:
              max: 200
              level: warning
            indentation:
              spaces: 2
            truthy:
              allowed-values: ['true', 'false', 'yes', 'no']
          ignore: |
            */templates/_helpers.tpl
          EOF
          
          find ${{ env.CHART_PATH }} -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "🔍 Checking: $file"
            yamllint -c .yamllint "$file" || true
          done
          echo "✅ YAML lint terminé"

      - name: ✅ CI Success Summary
        if: success()
        run: |
          echo ""
          echo "🎉 === CI RÉUSSI ==="
          echo "✅ Helm lint: OK"
          echo "✅ Template rendering: OK"
          echo "✅ Security audit: OK"
          echo "✅ YAML lint: OK"
          echo ""
          echo "🚀 Le chart mail est prêt pour le déploiement!"

      - name: ❌ CI Failure Summary
        if: failure()
        run: |
          echo ""
          echo "💥 === CI ÉCHOUÉ ==="
          echo "❌ Des erreurs ont été détectées"
          echo "Vérifiez les logs ci-dessus"
          exit 1